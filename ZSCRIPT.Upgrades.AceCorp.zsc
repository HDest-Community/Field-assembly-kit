class FAK_Gungnir_Accelerator : FAK_Upgrade
{
	override string GetItem() { return "HDGungnir"; }
	override string GetDisplayName() { return "Accelerator"; }
	override int GetCost() { return 2; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 1; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 1 > 0; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~1; GiveCore(wpn.owner, 0.8); }
}

class FAK_Gungnir_Capacitor : FAK_Upgrade
{
	override string GetItem() { return "HDGungnir"; }
	override string GetDisplayName() { return "Capacitor"; }
	override int GetCost() { return 2; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 2; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 2 > 0; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~2; GiveCore(wpn.owner, 0.8); }
}

class FAK_Gungnir_Processor : FAK_Upgrade
{
	override string GetItem() { return "HDGungnir"; }
	override string GetDisplayName() { return "Processor"; }
	override int GetCost() { return 2; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 4; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 4 > 0; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~4; GiveCore(wpn.owner, 0.8); }
}

class FAK_Gungnir_AntiFrag : FAK_Upgrade
{
	override string GetItem() { return "HDGungnir"; }
	override string GetDisplayName() { return "Anti-Frag Containment Cell"; }
	override int GetCost() { return 2; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp)
	{
		wpn.WeaponStatus[0] |= 8;

		Name cls = 'HDFoG';
		Inventory fog = wpn.owner.FindInventory(cls);
		wpn.owner.DropInventory(fog);
		fog.Destroy();
	}
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 8 > 0; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~8; GiveCore(wpn.owner, 1.0); }
	override bool CheckPrerequisites(HDWeapon wpn, HDPickup pkp)
	{
		Name cls = 'HDFoG';
		return (class<Actor>)(cls) && wpn.owner.FindInventory(cls) && wpn.WeaponStatus[0] & 2;
	}
	override string GetFailMessage(HDWeapon wpn, HDPickup pkp, int type)
	{
		if (type == FMType_Requirements)
		{
			Name cls = 'HDFoG';
			if ((class<Actor>)(cls))
			{
				return wpn.WeaponStatus[0] & 2 ? "You need a Finger of God for this upgrade." : "You need to upgrade the capacitor first.";
			}
			return "This technology does not exist.";
		}
		return Super.GetFailMessage(wpn, pkp, type);
	}
}

class FAK_Redline_HeatSink : FAK_Upgrade
{
	override string GetItem() { return "HDRedline"; }
	override string GetDisplayName() { return "Heat Sink"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 1; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 1 > 0; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~1; GiveCore(wpn.owner, 0.5); }
}

class FAK_Redline_Scope : FAK_Upgrade
{
	override string GetItem() { return "HDRedline"; }
	override string GetDisplayName() { return "Scope"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 2; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 2 > 0; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~1; GiveCore(wpn.owner, 0.4); }
}

class FAK_Redline_Capacitor : FAK_Upgrade
{
	override string GetItem() { return "HDRedline"; }
	override string GetDisplayName() { return "Capacitor"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 4; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 4 > 0; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~1; GiveCore(wpn.owner, 0.6); }
}

class FAK_Viper_LightTrigger : FAK_Upgrade
{
	override string GetItem() { return "HDViper"; }
	override string GetDisplayName() { return "Lighter Trigger"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 2; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 2 > 0; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~1; GiveCore(wpn.owner, 0.15); }
}

class FAK_Viper_HeavyFrame : FAK_Upgrade
{
	override string GetItem() { return "HDViper"; }
	override string GetDisplayName() { return "Heavy Frame"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 4; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 4 > 0; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~1; GiveCore(wpn.owner, 0.25); }
}

class FAK_Viper_ExtendedBarrel : FAK_Upgrade
{
	override string GetItem() { return "HDViper"; }
	override string GetDisplayName() { return "Extended Barrel"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 8; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 8 > 0; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~1; GiveCore(wpn.owner, 0.25); }
}

class FAK_Jackdaw_RapidFire : FAK_Upgrade
{
	override string GetItem() { return "HDJackdaw"; }
	override string GetDisplayName() { return "Rapid-Fire"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 2; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 2 > 0; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~1; GiveCore(wpn.owner, 0.35); }
}

class FAK_PSG_ExtraPoint : FAK_Upgrade
{
	override string GetItem() { return "HDPersonalShieldGenerator"; }
	override string GetDisplayName() { return "+2 Upgrade Points"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[8] += 2; wpn.Icon = TexMan.CheckForTexture(wpn.GetPickupSprite(), TexMan.Type_Any); }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return 2; }
}

class FAK_PSG_Repair : FAK_Upgrade
{
	override string GetItem() { return "HDPersonalShieldGenerator"; }
	override string GetDisplayName() { return "Repair 50%"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[6] /= 2; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return 2; }
}

class FAK_Barricade_Repair : FAK_Upgrade
{
	override string GetItem() { return "HDDeployableBarricade"; }
	override string GetDisplayName() { return "Repair 50%"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { pkp.Health = min(pkp.default.Health, pkp.Health + pkp.default.Health / 2); }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return 2; }
}