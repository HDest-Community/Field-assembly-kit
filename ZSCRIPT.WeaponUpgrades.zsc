class WUK_WeaponUpgrade abstract
{
	// [Ace] Make these abstract at some point.
	abstract string GetWeapon();
	abstract string GetDisplayName();
	virtual clearscope int GetCost() { return 2; }

	abstract play void DoUpgrade(HDWeapon wpn);
	abstract clearscope bool HasUpgrade(HDWeapon wpn);

	virtual play void DoDowngrade(HDWeapon wpn) { }
	virtual clearscope bool CanDowngrade() { return false; }

	virtual clearscope bool CheckPrerequisites(HDWeapon wpn) { return true; }
	virtual string GetFailMessage(int type) const
	{
		switch (type)
		{
			case 0: return "Requirements not met.";
			case 1: return "Upgrade has already been installed.";
			case 2: return "Upgrade has already been uninstalled or no downgrade is available.";
		}
		return "Error message that the player should never see. Go complain to Ace.";
	}
}

// --------------- VANILLA ---------------

class WUK_HDPistol_SelectFire : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDPistol"; }
	override string GetDisplayName() { return "Select-Fire"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 1; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 1; }
}

class WUK_SMG_SelectFire : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDSMG"; }
	override string GetDisplayName() { return "Select-Fire"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[5] = 0; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[5] == 0; }
}

class WUK_SMG_ReflexSight : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDSMG"; }
	override string GetDisplayName() { return "Reflex Sight"; }
	override int GetCost() { return 1; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 2; }
	override void DoDowngrade(HDWeapon wpn) { wpn.WeaponStatus[0] &= ~2; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 2; }
	override bool CanDowngrade() { return true; }
}

class WUK_Hunter_FullAuto : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "Hunter"; }
	override string GetDisplayName() { return "Full-Auto"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 1; wpn.WeaponStatus[0] &= ~64; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 1; } // [Ace] Yes, you can upgrade an Export hunter and make it full-auto. But why would you do that? Are you mad? Do you work for Tchernobog?
}

class WUK_Hunter_MaxChoke : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "Hunter"; }
	override string GetDisplayName() { return "Max Choke"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[7] = 7; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[7] == 7; }
}

class WUK_Hunter_TubeUpgrade : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "Hunter"; }
	override string GetDisplayName() { return "Tube Upgrade (+2)"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[5] += 2; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[5] > 7; }
}

class WUK_Slayer_MaxChoke : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "Slayer"; }
	override string GetDisplayName() { return "Max Choke"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[6] = 7; wpn.WeaponStatus[7] = 7; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[6] == 7 && wpn.WeaponStatus[7] == 7; }
}

class WUK_ZM66_SelectFire : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "ZM66AssaultRifle"; }
	override string GetDisplayName() { return "Select-Fire"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] &= ~32; }
	override bool HasUpgrade(HDWeapon wpn) { return !(wpn.WeaponStatus[0] & 32); }
}

class WUK_ZM66_GL : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "ZM66AssaultRifle"; }
	override string GetDisplayName() { return "Grenade Launcher"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] &= ~16; }
	override bool HasUpgrade(HDWeapon wpn) { return !(wpn.WeaponStatus[0] & 16); }
}

class WUK_Liberator_SelectFire : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "LiberatorRifle"; }
	override string GetDisplayName() { return "Select-Fire"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] &= ~1024; }
	override bool HasUpgrade(HDWeapon wpn) { return !(wpn.WeaponStatus[0] & 1024); }
}

class WUK_Liberator_GL : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "LiberatorRifle"; }
	override string GetDisplayName() { return "Grenade Launcher"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] &= ~8; }
	override bool HasUpgrade(HDWeapon wpn) { return !(wpn.WeaponStatus[0] & 8); }
}

class WUK_Liberator_NoBullpup : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "LiberatorRifle"; }
	override string GetDisplayName() { return "Long Rifle"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 512; wpn.bFITSINBACKPACK = false; }
	override void DoDowngrade(HDWeapon wpn) { wpn.WeaponStatus[0] &= ~512; wpn.bFITSINBACKPACK = true; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 512; }
	override bool CanDowngrade() { return true; }
}

class WUK_Liberator_FrontReticle : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "LiberatorRifle"; }
	override string GetDisplayName() { return "Front Reticle"; }
	override int GetCost() { return 1; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 32; }
	override void DoDowngrade(HDWeapon wpn) { wpn.WeaponStatus[0] &= ~32; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 32; }
	override bool CanDowngrade() { return true; }
}

class WUK_Liberator_AltReticle : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "LiberatorRifle"; }
	override string GetDisplayName() { return "Alt Reticle"; }
	override int GetCost() { return 1; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 64; }
	override void DoDowngrade(HDWeapon wpn) { wpn.WeaponStatus[0] &= ~64; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 64; }
	override bool CanDowngrade() { return true; }
}

class WUK_Boss_FrontReticle : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "BossRifle"; }
	override string GetDisplayName() { return "Front Reticle"; }
	override int GetCost() { return 1; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 1; }
	override void DoDowngrade(HDWeapon wpn) { wpn.WeaponStatus[0] &= ~1; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 1; }
	override bool CanDowngrade() { return true; }
}

class WUK_Boss_CustomChamber : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "BossRifle"; }
	override string GetDisplayName() { return "Custom Chamber"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 2; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 2; }
}

// --------------- PEPPERGRINDER ---------------

class WUK_Oddball_Pump : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDOddball"; }
	override string GetDisplayName() { return "Pump"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 8; }
	override void DoDowngrade(HDWeapon wpn) { wpn.WeaponStatus[0] &= ~8; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 8; }
	override bool CanDowngrade() { return true; }
}

class WUK_HLAR_SelectFire : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDHLAR"; }
	override string GetDisplayName() { return "Select-Fire"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[5] = 0; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[5] == 0; }
}

class WUK_HLAR_HairTrigger : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDHLAR"; }
	override string GetDisplayName() { return "GL Hair-Trigger"; }
	override int GetCost() { return 1; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] &= ~4; }
	override void DoDowngrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 4; }
	override bool HasUpgrade(HDWeapon wpn) { return !(wpn.WeaponStatus[0] & 4); }
	override bool CanDowngrade() { return true; }
}

class WUK_ScopedSlayer_MaxChoke : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "ScopedSlayer"; }
	override string GetDisplayName() { return "Max Choke"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[6] = 7; wpn.WeaponStatus[7] = 7; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[6] == 7 && wpn.WeaponStatus[7] == 7; }
}

class WUK_Wiseau_DoubleAction : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDWiseau"; }
	override string GetDisplayName() { return "Double-Action"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 4; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 4; }
}

class WUK_Wiseau_Capacitor : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDWiseau"; }
	override string GetDisplayName() { return "Capacitor"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 2; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 2; }
}

class WUK_Lisa_DoubleAction : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDLisa"; }
	override string GetDisplayName() { return "Double-Action"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 8; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 8; }
}

class WUK_Lisa_Scope : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDLisa"; }
	override string GetDisplayName() { return "Scope"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 4; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 4; }
}

class WUK_IronsLiberator_SelectFire : WUK_Liberator_SelectFire
{
	override string GetWeapon() { return "IronsLiberatorRifle"; }
}

class WUK_IronsLiberator_GL : WUK_Liberator_GL
{
	override string GetWeapon() { return "IronsLiberatorRifle"; }
}

class WUK_IronsLiberator_NoBullpup : WUK_Liberator_NoBullpup
{
	override string GetWeapon() { return "IronsLiberatorRifle"; }
}

class WUK_IronsLiberator_FrontReticle : WUK_Liberator_FrontReticle
{
	override string GetWeapon() { return "IronsLiberatorRifle"; }
}

class WUK_IronsLiberator_AltReticle : WUK_Liberator_AltReticle
{
	override string GetWeapon() { return "IronsLiberatorRifle"; }
}

class WUK_BoxCannon_ExtendedMag : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDBoxCannon"; }
	override string GetDisplayName() { return "Extended Magazine"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[7] = 1; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[7] == 1; }
}

class WUK_BoxCannon_DrumMag : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDBoxCannon"; }
	override string GetDisplayName() { return "Drum Magazine"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[7] = 2; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[7] == 2; }
}

class WUK_BoxCannon_Broomhandle : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDBoxCannon"; }
	override string GetDisplayName() { return "Broomhandle Stock"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 8; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 8; }
}

class WUK_BoxCannon_LongerBarrel : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDBoxCannon"; }
	override string GetDisplayName() { return "Longer Barrel"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[6] = 1; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[6] == 1; }
}

class WUK_BoxCannon_Suppressor : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDBoxCannon"; }
	override string GetDisplayName() { return "Suppressor"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[6] = 2; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[6] == 2; }
}

class WUK_Lotus_Scope : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDLotus"; }
	override string GetDisplayName() { return "Scope"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 4; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 4; }
}

class WUK_Lotus_GasSeal : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDLotus"; }
	override string GetDisplayName() { return "Improved Gas Seal"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 2; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 2; }
}

class WUK_Lotus_ExtendedBarrel : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDLotus"; }
	override string GetDisplayName() { return "Extended Barrel"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[7] = 1; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[7] == 1; }
}

class WUK_Lotus_Suppressor : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDLotus"; }
	override string GetDisplayName() { return "Suppressor"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[7] = 2; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[7] == 2; }
}

// --------------- BOGUS' STUFF ---------------

class WUK_ZM69_FullAuto : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "ZM69Rifle"; }
	override string GetDisplayName() { return "Full-Auto"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 32; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 32; }
}

// --------------- HEXADOKEN'S STUFF ---------------

class WUK_Bossmerg_ExtendedMag : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "Bossmerg"; }
	override string GetDisplayName() { return "Extended Magazine"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 32; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 32; }
}

class WUK_SpeedHunter_FullAuto : WUK_Hunter_FullAuto
{
	override string GetWeapon() { return "HunterSpeed"; }
}

class WUK_SpeedHunter_MaxChoke : WUK_Hunter_MaxChoke
{
	override string GetWeapon() { return "HunterSpeed"; }
}

class WUK_SpeedHunter_TubeUpgrade : WUK_Hunter_TubeUpgrade
{
	override string GetWeapon() { return "HunterSpeed"; }
}

class WUK_SpeedHunter_SideSaddles : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HunterSpeed"; }
	override string GetDisplayName() { return "Side Saddles"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] &= ~128; }
	override bool HasUpgrade(HDWeapon wpn) { return !(wpn.WeaponStatus[0] & 128); }
}

// --------------- POTETOBLOKE'S STUFF ---------------

class WUK_AutoMag_SelectFire : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HD_AutoMag"; }
	override string GetDisplayName() { return "Select-Fire"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 1; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 1; }
}

class WUK_Colt355_Masterkey : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HD_Colt355"; }
	override string GetDisplayName() { return "Masterkey"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[7] = 1; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[7] == 1; }
}

class WUK_Aug9mm_Masterkey : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HD_Aug9mm"; }
	override string GetDisplayName() { return "Masterkey"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[7] = 1; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[7] == 1; }
}

// --------------- ACCENSUS' STUFF ---------------

class WUK_Gungnir_Accelerator : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDGungnir"; }
	override string GetDisplayName() { return "Accelerator"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 1; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 1; }
}

class WUK_Gungnir_Capacitor : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDGungnir"; }
	override string GetDisplayName() { return "Capacitor"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 2; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 2; }
}

class WUK_Gungnir_Processor : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDGungnir"; }
	override string GetDisplayName() { return "Processor"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 4; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 4; }
}

class WUK_Redline_Scope : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDRedline"; }
	override string GetDisplayName() { return "Scope"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 4; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 4; }
}

class WUK_Redline_CustomBolt : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDRedline"; }
	override string GetDisplayName() { return "Custom Bolt"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 1; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 1; }
}

class WUK_Redline_Capacitor : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDRedline"; }
	override string GetDisplayName() { return "Capacitor"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 2; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 2; }
}

class WUK_Redline_Resonator : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDRedline"; }
	override string GetDisplayName() { return "Resonator"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 8; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 8; }
}

class WUK_Eris_LightTrigger : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDEris"; }
	override string GetDisplayName() { return "Lighter Trigger"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 2; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 2; }
}

class WUK_Eris_HeavyFrame : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDEris"; }
	override string GetDisplayName() { return "Heavy Frame"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 4; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 4; }
}

class WUK_Eris_ExtendedBarrel : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDEris"; }
	override string GetDisplayName() { return "Extended Barrel"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 8; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 8; }
}

class WUK_Jackdaw_RapidFire : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDJackdaw"; }
	override string GetDisplayName() { return "Rapid-Fire"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 2; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 2; }
}

// --------------- ICARUS' STUFF ---------------

class WUK_SpeedLotus_Scope : WUK_Lotus_Scope
{
	override string GetWeapon() { return "HDLotusSpeed"; }
}

class WUK_SpeedLotus_GasSeal : WUK_Lotus_GasSeal
{
	override string GetWeapon() { return "HDLotusSpeed"; }
}

class WUK_SpeedLotus_ExtendedBarrel : WUK_Lotus_ExtendedBarrel
{
	override string GetWeapon() { return "HDLotusSpeed"; }
}

class WUK_SpeedLotus_Suppressor : WUK_Lotus_Suppressor
{
	override string GetWeapon() { return "HDLotusSpeed"; }
}

class WUK_Fenris_PolyFrame : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDFenris"; }
	override string GetDisplayName() { return "Poly Frame"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 2; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 2; }
}

class WUK_Fenris_Capacitor : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDFenris"; }
	override string GetDisplayName() { return "Capacitor"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 4; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 4; }
}

class WUK_GFB_Capacitor : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDGFBlaster"; }
	override string GetDisplayName() { return "Capacitor"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 1; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 1; }
}

class WUK_DEagle_LightTrigger : WUK_Eris_LightTrigger
{
	override string GetWeapon() { return "HDDEagle"; }
}

class WUK_DEagle_HeavyFrame : WUK_Eris_HeavyFrame
{
	override string GetWeapon() { return "HDDEagle"; }
}

class WUK_DEagle_ExtendedBarrel : WUK_Eris_ExtendedBarrel
{
	override string GetWeapon() { return "HDDEagle"; }
}

class WUK_Six12_Barracuda : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDSix12"; }
	override string GetDisplayName() { return "Barracuda"; }
	override void DoUpgrade(HDWeapon wpn)
	{
		// [Ace] The framework was never meant for this. Ah well.
		Actor plr = wpn.owner;

		HDWeapon CurWeapon = wpn;
		int MagOne = CurWeapon.WeaponStatus[1];
		int MagTypeOne = CurWeapon.WeaponStatus[2];
		plr.DropInventory(CurWeapon);

		HDWeapon NewWeapon = HDWeapon(plr.FindInventory(CurWeapon.GetClass()));
		int MagTwo = NewWeapon.WeaponStatus[1];
		int MagTypeTwo = NewWeapon.WeaponStatus[2];
		plr.DropInventory(NewWeapon);

		CurWeapon.Destroy();
		NewWeapon.Destroy();

		Name BarracudaCls = 'HDBarracuda';
		HDWeapon Barr;
		if (plr.FindInventory(BarracudaCls))
		{
			Barr = HDWeapon(Actor.Spawn(BarracudaCls, plr.pos + (0, 0, plr.height / 2)));
			Barr.angle = plr.angle;
			Barr.A_ChangeVelocity(1, 0, 1, CVF_RELATIVE);
		}
		else
		{
			Barr = HDWeapon(plr.GiveInventoryType(BarracudaCls));
		}
		Barr.WeaponStatus[1] = MagOne;
		Barr.WeaponStatus[2] = MagTwo;
		if (MagTypeOne == 1)
		{
			Barr.WeaponStatus[3] |= 1 << 0;
		}
		if (MagTypeTwo == 1)
		{
			Barr.WeaponStatus[3] |= 1 << 1;
		}
	}
	override bool HasUpgrade(HDWeapon wpn) { return false; }
	override bool CheckPrerequisites(HDWeapon wpn)
	{
		Name BarracudaCls = 'HDBarracuda';
		return wpn.ActualAmount >= 2 && (class<Actor>)(BarracudaCls);
	}
	override string GetFailMessage(int type)
	{
		Name BarracudaCls = 'HDBarracuda';
		if (type == 0)
		{
			return (class<Actor>)(BarracudaCls) ? "You need two Six12 shotguns for upgrade." : "What the hell is a Barracuda?";
		}
		return Super.GetFailMessage(type);
	}
}