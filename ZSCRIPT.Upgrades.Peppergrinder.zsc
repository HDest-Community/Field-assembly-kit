class FAK_Oddball_Pump : FAK_Upgrade
{
	override string GetItem() { return "HDOddball"; }
	override string GetDisplayName() { return "Pump"; }
	override int GetCost() { return 0; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 8; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~8; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 8 > 0; }
}

class FAK_HLAR_SelectFire : FAK_Upgrade
{
	override string GetItem() { return "HDHLAR"; }
	override string GetDisplayName() { return "Select-Fire"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[5] = 0; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[5] == 0; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[5] = 1; GiveCore(wpn.owner, 0.2); }
}

class FAK_HLAR_HairTrigger : FAK_Upgrade
{
	override string GetItem() { return "HDHLAR"; }
	override string GetDisplayName() { return "GL Hair-Trigger"; }
	override int GetCost() { return 0; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~4; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return !(wpn.WeaponStatus[0] & 4 > 0); }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 4; }
}

class FAK_ScopedSlayer_MaxChoke : FAK_Slayer_MaxChoke
{
	override string GetItem() { return "ScopedSlayer"; }
}

class FAK_Wiseau_DoubleAction : FAK_Upgrade
{
	override string GetItem() { return "HDWiseau"; }
	override string GetDisplayName() { return "Double-Action"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 4; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 4 > 0; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~4; GiveCore(wpn.owner, 0.3); }
}

class FAK_Wiseau_Capacitor : FAK_Upgrade
{
	override string GetItem() { return "HDWiseau"; }
	override string GetDisplayName() { return "Capacitor"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 2; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 2 > 0; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~2; GiveCore(wpn.owner, 0.4); }
}

class FAK_Lisa_Scope : FAK_Upgrade
{
	override string GetItem() { return "HDLisa"; }
	override string GetDisplayName() { return "Box Scope"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 4; wpn.WeaponStatus[0] &= ~8; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 4 ? HUResult_Installed : HUResult_Unique; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~4; GiveCore(wpn.owner, 0.3); }
}

class FAK_Lisa_TechScope : FAK_Upgrade
{
	override string GetItem() { return "HDLisa"; }
	override string GetDisplayName() { return "Tech Scope"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 8; wpn.WeaponStatus[0] &= ~4; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 8 ? HUResult_Installed : HUResult_Unique; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~8; GiveCore(wpn.owner, 0.3); }
}

class FAK_Lisa_DoubleAction : FAK_Upgrade
{
	override string GetItem() { return "HDLisa"; }
	override string GetDisplayName() { return "Double-Action"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 16; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 16 > 0; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~16; GiveCore(wpn.owner, 0.25); }
}

class FAK_IronsLiberator_SelectFire : FAK_Liberator_SelectFire
{
	override string GetItem() { return "IronsLiberatorRifle"; }
}

class FAK_IronsLiberator_GL : FAK_Liberator_GL
{
	override string GetItem() { return "IronsLiberatorRifle"; }
}

class FAK_IronsLiberator_NoBullpup : FAK_Liberator_NoBullpup
{
	override string GetItem() { return "IronsLiberatorRifle"; }
}

class FAK_IronsLiberator_FrontReticle : FAK_Liberator_FrontReticle
{
	override string GetItem() { return "IronsLiberatorRifle"; }
}

class FAK_IronsLiberator_AltReticle : FAK_Liberator_AltReticle
{
	override string GetItem() { return "IronsLiberatorRifle"; }
}

class FAK_BoxCannon_ExtendedMag : FAK_Upgrade
{
	override string GetItem() { return "HDBoxCannon"; }
	override string GetDisplayName() { return "Extended Magazine"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[7] = 1; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[7] == 1 ? HUResult_Installed : HUResult_Unique; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[7] = 0; GiveCore(wpn.owner, 0.3); }
}

class FAK_BoxCannon_DrumMag : FAK_Upgrade
{
	override string GetItem() { return "HDBoxCannon"; }
	override string GetDisplayName() { return "Drum Magazine"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[7] = 2; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[7] == 2 ? HUResult_Installed : HUResult_Unique; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[7] = 0; GiveCore(wpn.owner, 0.3); }
}

class FAK_BoxCannon_Broomhandle : FAK_Upgrade
{
	override string GetItem() { return "HDBoxCannon"; }
	override string GetDisplayName() { return "Broomhandle Stock"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 8; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 8 > 0; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~8; GiveCore(wpn.owner, 0.15); }
}

class FAK_BoxCannon_LongerBarrel : FAK_Upgrade
{
	override string GetItem() { return "HDBoxCannon"; }
	override string GetDisplayName() { return "Longer Barrel"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[6] = 1; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[6] == 1 ? HUResult_Installed : HUResult_Unique; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[6] = 0; GiveCore(wpn.owner, 0.25); }
}

class FAK_BoxCannon_Suppressor : FAK_Upgrade
{
	override string GetItem() { return "HDBoxCannon"; }
	override string GetDisplayName() { return "Suppressor"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[6] = 2; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[6] == 2 ? HUResult_Installed : HUResult_Unique; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[6] = 0; GiveCore(wpn.owner, 0.25); }
}

class FAK_Lotus_Scope : FAK_Upgrade
{
	override string GetItem() { return "HDLotus"; }
	override string GetDisplayName() { return "Scope"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 4; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 4 > 0; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~4; GiveCore(wpn.owner, 0.25); }
}

class FAK_Lotus_GasSeal : FAK_Upgrade
{
	override string GetItem() { return "HDLotus"; }
	override string GetDisplayName() { return "Improved Gas Seal"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 2; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 2 > 0; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~2; GiveCore(wpn.owner, 0.35); }
}

class FAK_Lotus_ExtendedBarrel : FAK_Upgrade
{
	override string GetItem() { return "HDLotus"; }
	override string GetDisplayName() { return "Extended Barrel"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[7] = 1; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[7] == 1 ? HUResult_Installed : HUResult_Unique; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[7] = 0; GiveCore(wpn.owner, 0.35); }
}

class FAK_Lotus_Suppressor : FAK_Upgrade
{
	override string GetItem() { return "HDLotus"; }
	override string GetDisplayName() { return "Suppressor"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[7] = 2; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[7] == 2 ? HUResult_Installed : HUResult_Unique; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[7] = 0; GiveCore(wpn.owner, 0.35); }
}