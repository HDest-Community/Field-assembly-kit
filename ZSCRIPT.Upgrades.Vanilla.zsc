class FAK_HDPistol_SelectFire : FAK_Upgrade
{
	override string GetItem() { return "HDPistol"; }
	override string GetDisplayName() { return "Select-Fire"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 1; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 1 > 0; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~1; GiveCore(wpn.owner, 0.5); }
}

class FAK_HDRevolver_Speedloader : FAK_Upgrade
{
	override string GetItem() { return "HDRevolver"; }
	override string GetDisplayName() { return "Speedloader"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 64; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 64 > 0; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~64; GiveCore(wpn.owner, 0.8); }
}

class FAK_SMG_SelectFire : FAK_Upgrade
{
	override string GetItem() { return "HDSMG"; }
	override string GetDisplayName() { return "Select-Fire"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[5] = 0; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[5] == 0; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[5] = 1; GiveCore(wpn.owner, 0.05); }
}

class FAK_SMG_ReflexSight : FAK_Upgrade
{
	override string GetItem() { return "HDSMG"; }
	override string GetDisplayName() { return "Reflex Sight"; }
	override int GetCost() { return 0; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 2; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 2 > 0; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~2; }
}

class FAK_Hunter_FullAuto : FAK_Upgrade
{
	override string GetItem() { return "Hunter"; }
	override string GetDisplayName() { return "Full-Auto"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 1; wpn.WeaponStatus[0] &= ~64; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 1 > 0; } // [Ace] Yes, you can upgrade an Export hunter and make it full-auto. But why would you do that? Are you mad? Do you work for Tchernobog?
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~1; GiveCore(wpn.owner, 0.9); }
}

class FAK_Hunter_MaxChoke : FAK_Upgrade
{
	override string GetItem() { return "Hunter"; }
	override string GetDisplayName() { return "Max Choke"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[7] = 7; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[7] == 7; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[7] = 0; GiveCore(wpn.owner, 0.7); }
}

class FAK_Hunter_TubeUpgrade : FAK_Upgrade
{
	override string GetItem() { return "Hunter"; }
	override string GetDisplayName() { return "Tube Upgrade (+2)"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[5] += 2; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[5] > 7; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[5] -= 2; GiveCore(wpn.owner, 0.8); }
}

class FAK_Slayer_MaxChoke : FAK_Upgrade
{
	override string GetItem() { return "Slayer"; }
	override string GetDisplayName() { return "Max Choke"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[6] = 7; wpn.WeaponStatus[7] = 7; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[6] == 7 && wpn.WeaponStatus[7] == 7; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[6] = 0; wpn.WeaponStatus[7] = 0; GiveCore(wpn.owner, 0.03); }
}

class FAK_Slayer_SawnOff : FAK_Upgrade
{
	override string GetItem() { return "Slayer"; }
	override string GetDisplayName() { return "Sawn-Off"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp)
	{
		Actor plr = wpn.owner;

		int leftChamber = wpn.WeaponStatus[SLAYS_CHAMBER1];
		int rightChamber = wpn.WeaponStatus[SLAYS_CHAMBER2];
		int saddles = wpn.WeaponStatus[SHOTS_SIDESADDLE];
		wpn.Destroy();

		if (saddles > 0)
		{
			plr.A_GiveInventory('HDShellAmmo', saddles);
		}

		Name cls = 'SawedSlayer';
		HDWeapon sawedOff;
		if (plr.FindInventory(cls))
		{
			sawedOff = HDWeapon(Actor.Spawn(cls, plr.pos + (0, 0, plr.height / 2)));
			sawedOff.angle = plr.angle;
			sawedOff.A_ChangeVelocity(1, 0, 1, CVF_RELATIVE);
		}
		else
		{
			sawedOff = HDWeapon(plr.GiveInventoryType(cls));
		}
		sawedOff.WeaponStatus[1] = leftChamber;
		sawedOff.WeaponStatus[2] = rightChamber;
	}
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return 3; }
	override bool CheckPrerequisites(HDWeapon wpn, HDPickup pkp)
	{
		Name cls = 'SawedSlayer';
		return (class<Actor>)(cls);
	}
	override string GetFailMessage(HDWeapon wpn, HDPickup pkp, int type)
	{
		Name cls = 'SawedSlayer';
		if (type == FMType_Requirements && !((class<Actor>)(cls)))
		{
			return "You don't have a saw on hand.";
		}
		return Super.GetFailMessage(wpn, pkp, type);
	}
}

class FAK_ZM66_SelectFire : FAK_Upgrade
{
	override string GetItem() { return "ZM66AssaultRifle"; }
	override string GetDisplayName() { return "Select-Fire"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~32; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return !(wpn.WeaponStatus[0] & 32 > 0); }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 32; GiveCore(wpn.owner, 0.03); }
}

class FAK_ZM66_GL : FAK_Upgrade
{
	override string GetItem() { return "ZM66AssaultRifle"; }
	override string GetDisplayName() { return "Grenade Launcher"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~16; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return !(wpn.WeaponStatus[0] & 16 > 0); }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp)
	{
		wpn.WeaponStatus[0] |= 16;
		GiveCore(wpn.owner, 0.2);
		if (wpn.WeaponStatus[0] & 8)
		{
			wpn.WeaponStatus[0] &= ~8;
			wpn.owner.A_SpawnItemEx('HDRocketAmmo', cos(wpn.owner.pitch) * 10, 0, wpn.owner.height - 10 - 10 * sin(wpn.owner.pitch), wpn.owner.vel.x, wpn.owner.vel.y, wpn.owner.vel.z, 0, SXF_ABSOLUTEMOMENTUM | SXF_NOCHECKPOSITION | SXF_TRANSFERPITCH);
			wpn.owner.A_StartSound("weapons/grenopen", CHAN_WEAPON);
		}
	}
}

class FAK_Vulcanette_Repair : FAK_Upgrade
{
	override string GetItem() { return "Vulcanette"; }
	override string GetDisplayName() { return "Full Repair"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[VULCS_PERMADAMAGE] = 0; wpn.WeaponStatus[VULCS_BREAKCHANCE] = 0; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return 2; }
}

class FAK_Liberator_SelectFire : FAK_Upgrade
{
	override string GetItem() { return "LiberatorRifle"; }
	override string GetDisplayName() { return "Select-Fire"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~1024; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return !(wpn.WeaponStatus[0] & 1024 > 0); }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 1024; GiveCore(wpn.owner, 0.25); }
}

class FAK_Liberator_GL : FAK_Upgrade
{
	override string GetItem() { return "LiberatorRifle"; }
	override string GetDisplayName() { return "Grenade Launcher"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~8; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return !(wpn.WeaponStatus[0] & 8 > 0); }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp)
	{
		wpn.WeaponStatus[0] |= 8;
		GiveCore(wpn.owner, 0.6);
		if (wpn.WeaponStatus[0] & 4)
		{
			wpn.WeaponStatus[0] &= ~4;
			wpn.owner.A_SpawnItemEx('HDRocketAmmo', cos(wpn.owner.pitch) * 10, 0, wpn.owner.height - 10 - 10 * sin(wpn.owner.pitch), wpn.owner.vel.x, wpn.owner.vel.y, wpn.owner.vel.z, 0, SXF_ABSOLUTEMOMENTUM | SXF_NOCHECKPOSITION | SXF_TRANSFERPITCH);
			wpn.owner.A_StartSound("weapons/grenopen", CHAN_WEAPON);
		}
	}
}

class FAK_Liberator_NoBullpup : FAK_Upgrade
{
	override string GetItem() { return "LiberatorRifle"; }
	override string GetDisplayName() { return "Long Rifle"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 512; wpn.bFITSINBACKPACK = false; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~512; wpn.bFITSINBACKPACK = true; GiveCore(wpn.owner, 0.8); }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 512 > 0; }
}

class FAK_Liberator_FrontReticle : FAK_Upgrade
{
	override string GetItem() { return "LiberatorRifle"; }
	override string GetDisplayName() { return "Front Reticle"; }
	override int GetCost() { return 0; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 32; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~32; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 32 > 0; }
}

class FAK_Liberator_AltReticle : FAK_Upgrade
{
	override string GetItem() { return "LiberatorRifle"; }
	override string GetDisplayName() { return "Alt Reticle"; }
	override int GetCost() { return 0; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 64; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~64; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 64 > 0; }
}

class FAK_Boss_FrontReticle : FAK_Upgrade
{
	override string GetItem() { return "BossRifle"; }
	override string GetDisplayName() { return "Front Reticle"; }
	override int GetCost() { return 0; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 1; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~1; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 1 > 0; }
}

class FAK_Boss_CustomChamber : FAK_Upgrade
{
	override string GetItem() { return "BossRifle"; }
	override string GetDisplayName() { return "Custom Chamber"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] |= 2; }
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return wpn.WeaponStatus[0] & 2 > 0; }
	override void DoDowngrade(HDWeapon wpn, HDPickup pkp) { wpn.WeaponStatus[0] &= ~2; GiveCore(wpn.owner, 0.7); }
}

class FAK_Armor_Repair : FAK_Upgrade
{
	override string GetItem() { return "HDArmour"; }
	override string GetDisplayName() { return "Full Repair"; }
	override void DoUpgrade(HDWeapon wpn, HDPickup pkp)
	{
		let arm = HDArmour(pkp);
		arm.Mags[arm.Mags.Size() - 1] = arm.mega ? 1070 : 144;
	}
	override int HasUpgrade(HDWeapon wpn, HDPickup pkp) { return 2; }
}