class WUK_HDPistol_SelectFire : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDPistol"; }
	override string GetDisplayName() { return "Select-Fire"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 1; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 1; }
}

class WUK_HDRevolver_Speedloader : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDRevolver"; }
	override string GetDisplayName() { return "Speedloader"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 64; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 64; }
	override int GetCost() { return 1; }
}

class WUK_SMG_SelectFire : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDSMG"; }
	override string GetDisplayName() { return "Select-Fire"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[5] = 0; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[5] == 0; }
}

class WUK_SMG_ReflexSight : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "HDSMG"; }
	override string GetDisplayName() { return "Reflex Sight"; }
	override int GetCost() { return 1; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 2; }
	override void DoDowngrade(HDWeapon wpn) { wpn.WeaponStatus[0] &= ~2; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 2; }
	override bool CanDowngrade() { return true; }
}

class WUK_Hunter_FullAuto : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "Hunter"; }
	override string GetDisplayName() { return "Full-Auto"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 1; wpn.WeaponStatus[0] &= ~64; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 1; } // [Ace] Yes, you can upgrade an Export hunter and make it full-auto. But why would you do that? Are you mad? Do you work for Tchernobog?
}

class WUK_Hunter_MaxChoke : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "Hunter"; }
	override string GetDisplayName() { return "Max Choke"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[7] = 7; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[7] == 7; }
}

class WUK_Hunter_TubeUpgrade : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "Hunter"; }
	override string GetDisplayName() { return "Tube Upgrade (+2)"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[5] += 2; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[5] > 7; }
}

class WUK_Slayer_MaxChoke : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "Slayer"; }
	override string GetDisplayName() { return "Max Choke"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[6] = 7; wpn.WeaponStatus[7] = 7; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[6] == 7 && wpn.WeaponStatus[7] == 7; }
}

class WUK_Slayer_SawnOff : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "Slayer"; }
	override string GetDisplayName() { return "Sawn-Off"; }
	override void DoUpgrade(HDWeapon wpn)
	{
		Actor plr = wpn.owner;

		int leftChamber = wpn.WeaponStatus[SLAYS_CHAMBER1];
		int rightChamber = wpn.WeaponStatus[SLAYS_CHAMBER2];
		int saddles = wpn.WeaponStatus[SHOTS_SIDESADDLE];
		wpn.Destroy();

		if (saddles > 0)
		{
			plr.A_GiveInventory('HDShellAmmo', saddles);
		}

		Name cls = 'SawedSlayer';
		HDWeapon sawedOff;
		if (plr.FindInventory(cls))
		{
			sawedOff = HDWeapon(Actor.Spawn(cls, plr.pos + (0, 0, plr.height / 2)));
			sawedOff.angle = plr.angle;
			sawedOff.A_ChangeVelocity(1, 0, 1, CVF_RELATIVE);
		}
		else
		{
			sawedOff = HDWeapon(plr.GiveInventoryType(cls));
		}
		sawedOff.WeaponStatus[1] = leftChamber;
		sawedOff.WeaponStatus[2] = rightChamber;
	}
	override bool HasUpgrade(HDWeapon wpn) { return false; }
	override bool CheckPrerequisites(HDWeapon wpn)
	{
		Name cls = 'SawedSlayer';
		return (class<Actor>)(cls);
	}
	override string GetFailMessage(HDWeapon wpn, int type)
	{
		Name cls = 'SawedSlayer';
		if (type == FMType_Requirements && !((class<Actor>)(cls)))
		{
			return "You don't have a saw on hand.";
		}
		return Super.GetFailMessage(wpn, type);
	}
}

class WUK_ZM66_SelectFire : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "ZM66AssaultRifle"; }
	override string GetDisplayName() { return "Select-Fire"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] &= ~32; }
	override bool HasUpgrade(HDWeapon wpn) { return !(wpn.WeaponStatus[0] & 32); }
}

class WUK_ZM66_GL : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "ZM66AssaultRifle"; }
	override string GetDisplayName() { return "Grenade Launcher"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] &= ~16; }
	override bool HasUpgrade(HDWeapon wpn) { return !(wpn.WeaponStatus[0] & 16); }
}

class WUK_Liberator_SelectFire : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "LiberatorRifle"; }
	override string GetDisplayName() { return "Select-Fire"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] &= ~1024; }
	override bool HasUpgrade(HDWeapon wpn) { return !(wpn.WeaponStatus[0] & 1024); }
}

class WUK_Liberator_GL : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "LiberatorRifle"; }
	override string GetDisplayName() { return "Grenade Launcher"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] &= ~8; }
	override bool HasUpgrade(HDWeapon wpn) { return !(wpn.WeaponStatus[0] & 8); }
}

class WUK_Liberator_NoBullpup : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "LiberatorRifle"; }
	override string GetDisplayName() { return "Long Rifle"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 512; wpn.bFITSINBACKPACK = false; }
	override void DoDowngrade(HDWeapon wpn) { wpn.WeaponStatus[0] &= ~512; wpn.bFITSINBACKPACK = true; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 512; }
	override bool CanDowngrade() { return true; }
}

class WUK_Liberator_FrontReticle : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "LiberatorRifle"; }
	override string GetDisplayName() { return "Front Reticle"; }
	override int GetCost() { return 1; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 32; }
	override void DoDowngrade(HDWeapon wpn) { wpn.WeaponStatus[0] &= ~32; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 32; }
	override bool CanDowngrade() { return true; }
}

class WUK_Liberator_AltReticle : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "LiberatorRifle"; }
	override string GetDisplayName() { return "Alt Reticle"; }
	override int GetCost() { return 1; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 64; }
	override void DoDowngrade(HDWeapon wpn) { wpn.WeaponStatus[0] &= ~64; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 64; }
	override bool CanDowngrade() { return true; }
}

class WUK_Boss_FrontReticle : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "BossRifle"; }
	override string GetDisplayName() { return "Front Reticle"; }
	override int GetCost() { return 1; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 1; }
	override void DoDowngrade(HDWeapon wpn) { wpn.WeaponStatus[0] &= ~1; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 1; }
	override bool CanDowngrade() { return true; }
}

class WUK_Boss_CustomChamber : WUK_WeaponUpgrade
{
	override string GetWeapon() { return "BossRifle"; }
	override string GetDisplayName() { return "Custom Chamber"; }
	override void DoUpgrade(HDWeapon wpn) { wpn.WeaponStatus[0] |= 2; }
	override bool HasUpgrade(HDWeapon wpn) { return wpn.WeaponStatus[0] & 2; }
}